# Script de Actualizaci√≥n Local - Desde An√°lisis IIS
# Ayuda a actualizar el c√≥digo fuente local basado en cambios del servidor IIS

param(
    [string]$analysisFile = "",
    [string]$tempDir = "temp-iis-download",
    [switch]$interactive = $true
)

Write-Host "üîÑ ACTUALIZACI√ìN LOCAL DESDE AN√ÅLISIS IIS" -ForegroundColor Magenta
Write-Host "=========================================" -ForegroundColor Magenta

# Verificar directorio de trabajo
if (-not (Test-Path "package.json")) {
    Write-Error "‚ùå Ejecutar desde d:\proyecto\"
    exit 1
}

# Verificar que existe el directorio temporal con archivos IIS
if (-not (Test-Path $tempDir)) {
    Write-Error "‚ùå No se encontr√≥ $tempDir. Ejecutar sync-from-iis.ps1 primero"
    exit 1
}

try {
    Write-Host "`n1. Analizando archivos del servidor IIS..." -ForegroundColor Cyan
    
    $iisFiles = Get-ChildItem $tempDir -Recurse
    Write-Host "   üìä Total archivos IIS: $($iisFiles.Count)" -ForegroundColor White

    # 2. Buscar archivos que podr√≠an indicar cambios en contenido
    Write-Host "`n2. Identificando posibles cambios de contenido..." -ForegroundColor Cyan
    
    # Buscar en index.html cambios de texto/contenido
    $indexFile = Join-Path $tempDir "index.html"
    if (Test-Path $indexFile) {
        Write-Host "   üìÑ Analizando index.html..." -ForegroundColor White
        
        $indexContent = Get-Content $indexFile -Raw
        
        # Buscar texto espec√≠fico que podr√≠a haber cambiado
        $textPatterns = @(
            "DIRIS",
            "Lima Norte", 
            "Direcci√≥n Regional",
            "Salud",
            "Contacto",
            "Servicios"
        )
        
        Write-Host "   üîç Contenido encontrado en IIS:" -ForegroundColor Yellow
        foreach ($pattern in $textPatterns) {
            if ($indexContent -match $pattern) {
                Write-Host "     ‚úÖ Contiene: $pattern" -ForegroundColor Green
            }
        }
    }

    # 3. Comparar im√°genes
    Write-Host "`n3. Verificando im√°genes..." -ForegroundColor Cyan
    
    $iisImagesDir = Join-Path $tempDir "images"
    if (Test-Path $iisImagesDir) {
        $iisImages = Get-ChildItem $iisImagesDir -Recurse -File
        $localImages = Get-ChildItem "public\images" -Recurse -File -ErrorAction SilentlyContinue
        
        Write-Host "   üñºÔ∏è Im√°genes en IIS: $($iisImages.Count)" -ForegroundColor White
        Write-Host "   üñºÔ∏è Im√°genes locales: $($localImages.Count)" -ForegroundColor White
        
        # Buscar im√°genes nuevas o diferentes
        $newImages = @()
        foreach ($iisImg in $iisImages) {
            $relativePath = $iisImg.FullName.Replace("$tempDir\images\", "")
            $localPath = "public\images\$relativePath"
            
            if (-not (Test-Path $localPath)) {
                $newImages += $relativePath
            }
        }
        
        if ($newImages.Count -gt 0) {
            Write-Host "   ‚ö†Ô∏è Im√°genes nuevas en IIS:" -ForegroundColor Yellow
            foreach ($img in $newImages) {
                Write-Host "     + $img" -ForegroundColor Yellow
            }
        }
    }

    # 4. Analizar configuraci√≥n web.config
    Write-Host "`n4. Verificando configuraci√≥n..." -ForegroundColor Cyan
    
    $iisWebConfig = Join-Path $tempDir "web.config"
    if (Test-Path $iisWebConfig) {
        $localWebConfig = "deployment-iis\web.config"
        
        if (Test-Path $localWebConfig) {
            $iisConfigContent = Get-Content $iisWebConfig -Raw
            $localConfigContent = Get-Content $localWebConfig -Raw
            
            if ($iisConfigContent -ne $localConfigContent) {
                Write-Host "   ‚ö†Ô∏è web.config ha cambiado en el servidor" -ForegroundColor Yellow
            } else {
                Write-Host "   ‚úÖ web.config sin cambios" -ForegroundColor Green
            }
        }
    }

    # 5. Generar plan de actualizaci√≥n
    Write-Host "`n5. Generando plan de actualizaci√≥n..." -ForegroundColor Cyan
    
    $updatePlan = @"
# PLAN DE ACTUALIZACI√ìN LOCAL - Desde IIS
Fecha: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')

## ARCHIVOS ANALIZADOS:
* Directorio IIS: $tempDir
* Total archivos: $($iisFiles.Count)

## ACCIONES RECOMENDADAS:

### 1. REVISI√ìN MANUAL REQUERIDA:
* Comparar contenido de texto en index.html del IIS vs componentes React
* Verificar si hay cambios en informaci√≥n de contacto  
* Revisar si se modificaron servicios o descripciones
* Comprobar cambios en im√°genes o recursos

### 2. ARCHIVOS A REVISAR:
* $tempDir\index.html (contiene el HTML compilado)
* $tempDir\images\ (verificar im√°genes nuevas o modificadas)
* $tempDir\web.config (configuraci√≥n del servidor)

### 3. COMPONENTES LOCALES A ACTUALIZAR POSIBLEMENTE:
* src/components/landing/contact.tsx (informaci√≥n de contacto)
* src/components/landing/about.tsx (informaci√≥n institucional)
* src/components/landing/services.tsx (servicios ofrecidos)
* src/components/landing/hero.tsx (texto principal)
* public/images/ (im√°genes nuevas o modificadas)

### 4. PASOS DESPU√âS DE ACTUALIZAR:
* Ejecutar npm run dev para probar localmente
* Ejecutar sync-to-github.ps1 para subir a GitHub  
* Ejecutar sync-to-staging.ps1 para generar staging
* Probar en staging antes de actualizar producci√≥n

## NOTAS IMPORTANTES:
* Los archivos del IIS est√°n compilados/optimizados
* Los cambios reales est√°n en el c√≥digo fuente React (src/)
* Es necesario identificar QU√â cambi√≥ para actualizarlo en el c√≥digo fuente
"@

    $planFile = "PLAN-ACTUALIZACION-$(Get-Date -Format 'yyyyMMdd-HHmmss').md"
    Set-Content -Path $planFile -Value $updatePlan -Encoding UTF8

    # 6. Modo interactivo para ayudar con la actualizaci√≥n
    if ($interactive) {
        Write-Host "`n6. ü§ù ASISTENCIA INTERACTIVA" -ForegroundColor Cyan
        Write-Host "   =========================" -ForegroundColor Cyan
        
        $openIndex = Read-Host "¬øQuieres abrir el index.html del IIS para revisarlo? (s/n)"
        if ($openIndex -eq "s" -or $openIndex -eq "S") {
            if (Test-Path $indexFile) {
                Start-Process $indexFile
                Write-Host "   üìÑ Archivo abierto en navegador" -ForegroundColor Green
            }
        }
        
        $openFolder = Read-Host "¬øQuieres abrir la carpeta de archivos IIS descargados? (s/n)"
        if ($openFolder -eq "s" -or $openFolder -eq "S") {
            Start-Process (Resolve-Path $tempDir).Path
            Write-Host "   üìÅ Carpeta abierta en explorador" -ForegroundColor Green
        }
        
        Write-Host "`nüí° SUGERENCIAS PARA IDENTIFICAR CAMBIOS:" -ForegroundColor Yellow
        Write-Host "1. Abre el index.html del IIS en un navegador" -ForegroundColor White
        Write-Host "2. Abre tu sitio local: npm run dev" -ForegroundColor White
        Write-Host "3. Compara visualmente ambos sitios" -ForegroundColor White
        Write-Host "4. Identifica qu√© textos, im√°genes o secciones cambiaron" -ForegroundColor White
        Write-Host "5. Actualiza los componentes correspondientes en src/" -ForegroundColor White
    }

    # 7. Crear script de ejemplo para actualizaci√≥n com√∫n
    Write-Host "`n7. Creando script de ejemplo..." -ForegroundColor Cyan
    
    $exampleScript = @"
# Ejemplo de actualizaci√≥n de componentes
# Ejecutar despu√©s de identificar cambios

# Si cambi√≥ informaci√≥n de contacto:
# Editar: src/components/landing/contact.tsx

# Si cambi√≥ informaci√≥n institucional:
# Editar: src/components/landing/about.tsx

# Si cambiaron servicios:
# Editar: src/components/landing/services.tsx

# Si cambi√≥ el texto principal:
# Editar: src/components/landing/hero.tsx

# Despu√©s de hacer cambios:
npm run dev  # Probar localmente
.\sync\sync-to-github.ps1 -message "Sincronizaci√≥n desde servidor IIS"
.\sync\sync-to-staging.ps1
"@

    Set-Content -Path "ejemplo-actualizacion.ps1" -Value $exampleScript -Encoding UTF8

    Write-Host "`n‚úÖ AN√ÅLISIS Y PLAN COMPLETADOS" -ForegroundColor Green
    Write-Host "üìÑ Plan generado: $planFile" -ForegroundColor White
    Write-Host "üìù Script ejemplo: ejemplo-actualizacion.ps1" -ForegroundColor White
    
    Write-Host "`nüéØ PR√ìXIMOS PASOS:" -ForegroundColor Cyan
    Write-Host "1. Revisar $planFile" -ForegroundColor White
    Write-Host "2. Comparar visualmente IIS vs local" -ForegroundColor White
    Write-Host "3. Actualizar componentes en src/ seg√∫n cambios identificados" -ForegroundColor White
    Write-Host "4. Ejecutar: npm run dev para probar" -ForegroundColor White
    Write-Host "5. Resincronizar: .\sync\sync-to-github.ps1" -ForegroundColor White

} catch {
    Write-Error "‚ùå Error durante actualizaci√≥n: $_"
    exit 1
}
