# üöÄ Script de Actualizaci√≥n Autom√°tica desde GitHub
# Archivo: update-from-github.ps1
# Ubicaci√≥n: C:\inetpub\wwwroot\page_ofseg_dirisln\

param(
    [string]$CommitMessage = "Actualizaci√≥n autom√°tica desde GitHub"
)

Write-Host "üöÄ INICIANDO ACTUALIZACI√ìN DESDE GITHUB" -ForegroundColor Green
Write-Host "=================================" -ForegroundColor Green

# Funci√≥n para logging con timestamp
function Write-LogMessage {
    param([string]$Message, [string]$Type = "INFO")
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $color = switch($Type) {
        "ERROR" { "Red" }
        "SUCCESS" { "Green" }
        "WARNING" { "Yellow" }
        default { "White" }
    }
    Write-Host "[$timestamp] $Type: $Message" -ForegroundColor $color
}

# Variables de configuraci√≥n
$BackupDir = ".\backups\$(Get-Date -Format 'yyyyMMdd_HHmmss')"
$GitRepo = "https://github.com/pjreyesv04/landing_page_ofsef.git"
$TempDir = ".\temp_update"

try {
    # PASO 1: Crear backup de la versi√≥n actual
    Write-LogMessage "üìÅ Creando backup de la versi√≥n actual..."
    if (!(Test-Path "backups")) { New-Item -ItemType Directory -Path "backups" }
    New-Item -ItemType Directory -Path $BackupDir -Force
    
    # Backup archivos cr√≠ticos
    $CriticalFiles = @("index.html", "web.config", "_next", "images", "*.js", "*.css", "*.json")
    foreach ($pattern in $CriticalFiles) {
        if (Test-Path $pattern) {
            Copy-Item $pattern -Destination $BackupDir -Recurse -Force -ErrorAction SilentlyContinue
        }
    }
    Write-LogMessage "‚úÖ Backup creado en: $BackupDir" "SUCCESS"

    # PASO 2: Limpiar directorio temporal
    Write-LogMessage "üßπ Limpiando directorio temporal..."
    if (Test-Path $TempDir) { Remove-Item $TempDir -Recurse -Force }
    Write-LogMessage "‚úÖ Directorio temporal limpio" "SUCCESS"

    # PASO 3: Clonar repositorio
    Write-LogMessage "üì• Descargando √∫ltima versi√≥n desde GitHub..."
    git clone $GitRepo $TempDir
    if ($LASTEXITCODE -ne 0) {
        throw "Error al clonar repositorio de GitHub"
    }
    Write-LogMessage "‚úÖ Repositorio clonado exitosamente" "SUCCESS"

    # PASO 4: Verificar configuraci√≥n Next.js
    Write-LogMessage "‚öôÔ∏è Configurando Next.js para IIS..."
    $NextConfigPath = "$TempDir\next.config.ts"
    $IISConfigPath = "$TempDir\next.config.iis.ts"
    
    if (Test-Path $IISConfigPath) {
        Copy-Item $IISConfigPath -Destination $NextConfigPath -Force
        Write-LogMessage "‚úÖ Configuraci√≥n IIS aplicada" "SUCCESS"
    } else {
        Write-LogMessage "‚ö†Ô∏è No se encontr√≥ next.config.iis.ts, usando configuraci√≥n por defecto" "WARNING"
    }

    # PASO 5: Instalar dependencias y build
    Write-LogMessage "üì¶ Instalando dependencias de Node.js..."
    Set-Location $TempDir
    npm install --silent
    if ($LASTEXITCODE -ne 0) {
        throw "Error instalando dependencias npm"
    }
    Write-LogMessage "‚úÖ Dependencias instaladas" "SUCCESS"

    Write-LogMessage "üî® Construyendo aplicaci√≥n Next.js..."
    npm run build --silent
    if ($LASTEXITCODE -ne 0) {
        throw "Error en el proceso de build"
    }
    Write-LogMessage "‚úÖ Build completado exitosamente" "SUCCESS"

    # PASO 6: Verificar archivos generados
    Write-LogMessage "üîç Verificando archivos generados..."
    $OutDir = ".\out"
    if (!(Test-Path $OutDir)) {
        throw "Directorio 'out' no fue generado. Verificar configuraci√≥n de Next.js"
    }
    
    $RequiredFiles = @("index.html", "_next")
    foreach ($file in $RequiredFiles) {
        if (!(Test-Path "$OutDir\$file")) {
            throw "Archivo cr√≠tico no encontrado: $file"
        }
    }
    Write-LogMessage "‚úÖ Archivos cr√≠ticos verificados" "SUCCESS"

    # PASO 7: Regresar al directorio principal
    Set-Location ..

    # PASO 8: Respaldar web.config actual
    Write-LogMessage "üíæ Respaldando configuraci√≥n IIS actual..."
    if (Test-Path "web.config") {
        Copy-Item "web.config" -Destination "$BackupDir\web.config.backup" -Force
    }

    # PASO 9: Copiar archivos nuevos (excluyendo web.config si ya existe y es v√°lido)
    Write-LogMessage "üìÅ Copiando archivos actualizados..."
    
    # Copiar contenido del directorio out
    $SourceOut = "$TempDir\out\*"
    Copy-Item $SourceOut -Destination "." -Recurse -Force
    
    # Copiar archivos adicionales necesarios
    $AdditionalFiles = @("package.json", "package-lock.json")
    foreach ($file in $AdditionalFiles) {
        if (Test-Path "$TempDir\$file") {
            Copy-Item "$TempDir\$file" -Destination "." -Force
        }
    }
    Write-LogMessage "‚úÖ Archivos copiados exitosamente" "SUCCESS"

    # PASO 10: Verificar web.config
    Write-LogMessage "üîß Verificando configuraci√≥n IIS..."
    if (Test-Path "web.config") {
        try {
            [xml]$xmlContent = Get-Content "web.config" -Raw
            Write-LogMessage "‚úÖ web.config es v√°lido" "SUCCESS"
        } catch {
            Write-LogMessage "‚ö†Ô∏è web.config inv√°lido, restaurando backup..." "WARNING"
            Copy-Item "$BackupDir\web.config.backup" -Destination "web.config" -Force
        }
    } else {
        Write-LogMessage "‚ùå web.config no encontrado, copiando desde backup" "ERROR"
        Copy-Item "$BackupDir\web.config.backup" -Destination "web.config" -Force
    }

    # PASO 11: Limpiar archivos temporales
    Write-LogMessage "üßπ Limpiando archivos temporales..."
    if (Test-Path $TempDir) { Remove-Item $TempDir -Recurse -Force }
    Write-LogMessage "‚úÖ Limpieza completada" "SUCCESS"

    # PASO 12: Verificaciones finales
    Write-LogMessage "üîç Ejecutando verificaciones finales..."
    
    # Verificar que index.html existe y no es una p√°gina 404
    if (Test-Path "index.html") {
        $indexContent = Get-Content "index.html" -Raw
        if ($indexContent -match "404.*page.*not.*found") {
            Write-LogMessage "‚ö†Ô∏è ADVERTENCIA: index.html parece ser una p√°gina 404" "WARNING"
        } else {
            Write-LogMessage "‚úÖ index.html v√°lido" "SUCCESS"
        }
    }
    
    # Verificar archivos CSS y JS
    $CSSFiles = Get-ChildItem "_next\static\css\*.css" -ErrorAction SilentlyContinue
    $JSFiles = Get-ChildItem "_next\static\chunks\*.js" -ErrorAction SilentlyContinue
    
    Write-LogMessage "üìä Archivos encontrados:" "INFO"
    Write-LogMessage "   - CSS: $($CSSFiles.Count) archivos" "INFO"
    Write-LogMessage "   - JS: $($JSFiles.Count) archivos" "INFO"

    # PASO 13: Crear log de deployment
    $LogFile = "deployment-log.txt"
    $LogContent = @"
=== DEPLOYMENT LOG ===
Fecha: $(Get-Date)
Commit: $CommitMessage
Backup Location: $BackupDir
Status: SUCCESS

Archivos Cr√≠ticos:
- index.html: $(if (Test-Path "index.html") { "‚úÖ OK" } else { "‚ùå MISSING" })
- web.config: $(if (Test-Path "web.config") { "‚úÖ OK" } else { "‚ùå MISSING" })
- CSS Files: $($CSSFiles.Count)
- JS Files: $($JSFiles.Count)

Pr√≥ximos pasos:
1. Verificar sitio en Chrome: http://localhost/page_ofseg_dirisln/
2. Verificar sitio en Firefox: http://localhost/page_ofseg_dirisln/
3. Ejecutar diagn√≥stico: http://localhost/page_ofseg_dirisln/browser-test.html
"@
    $LogContent | Out-File -FilePath $LogFile -Encoding UTF8 -Force

    Write-Host "" -ForegroundColor Green
    Write-Host "üéâ ACTUALIZACI√ìN COMPLETADA EXITOSAMENTE" -ForegroundColor Green
    Write-Host "=================================" -ForegroundColor Green
    Write-LogMessage "üìã Log guardado en: $LogFile" "SUCCESS"
    Write-LogMessage "üíæ Backup disponible en: $BackupDir" "INFO"
    Write-LogMessage "üåê Verificar sitio en: http://localhost/page_ofseg_dirisln/" "INFO"

} catch {
    Write-LogMessage "‚ùå ERROR DURANTE LA ACTUALIZACI√ìN: $($_.Exception.Message)" "ERROR"
    
    # Restaurar desde backup en caso de error
    if (Test-Path $BackupDir) {
        Write-LogMessage "üîÑ Restaurando desde backup..." "WARNING"
        Copy-Item "$BackupDir\*" -Destination "." -Recurse -Force
        Write-LogMessage "‚úÖ Restauraci√≥n completada" "SUCCESS"
    }
    
    # Limpiar archivos temporales
    if (Test-Path $TempDir) { Remove-Item $TempDir -Recurse -Force }
    
    Write-Host "‚ùå ACTUALIZACI√ìN FALL√ì. Sistema restaurado al estado anterior." -ForegroundColor Red
    exit 1
}

Write-Host ""
Write-Host "‚úÖ Proceso completado. Revisar log para detalles." -ForegroundColor Green
